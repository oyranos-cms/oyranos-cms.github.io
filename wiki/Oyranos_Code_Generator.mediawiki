== How it works ==
=== Overview ===
The '''oyAPIGenerator''' executable takes 3 arguments as input.
* A directory the templates files using the grantlee format.
* A source directory with all included code from the templates.
* An output directory were all auto-generated code is created.

All are optional, and in an ''in source'' build none of them is actually
used, because they get the default values (respectively):
* ./templates
* ./sources
* ./API_generated

Actually, the '''extract_sources.sh''' shell script is used for convenience.
It cleans the API_generated/ directory, creates the code, and then builds it.
The paths work for an ''in source'' build.

=== The details ===
 TBD

== Code Organisation ==
=== API_generated/ ===
Not much to say, all the files here are auto-generated from the templates.

=== sources/ ===
Here is all the source code that does not need to be inside the templates.
===== <class>.dox =====
This is the Doxygen description for the class, with some additional tags.

<code>
 /** @struct  oyClass_s
  *  @ingroup some_group
  *  @extends oyStruct_s
  *  @brief   Brief description
  *  @internal
  *
  *  Multi line description
  *  @note New templates will not be created automaticly [notemplates]
  *  @note Create templates using "opaque pointer" [opaquepointer]
  *  @note This class holds a list of objects [list]
  *
  *  @version Oyranos: x.x.x
  *  @since   YYYY/MM/DD (Oyranos: x.x.x)
  *  @date    YYYY/MM/DD
  */
</code>

The basic idea is that the ''generator'' needs to know all kinds of information '''(metadata)'''
about the class and these are provided here. Along with the doxygen tags, a few additional
are also needed and are put in the ''@note'' tag.
;[notemplates]
: Each class has a template file for each generated source file. At class creation, these are
: also created automaticly and are read-only. When for any reason you want to override some
: default template block and edit the class templates, change their permissions to read-write
: and remove the [notemplates] tag
;[list]
: This tag specifies that the class is a special kind of class, a ''list'' of values. The
: convention is that the class name is in plural ''(ends with s)'' and the list item type
: is the class with the same name without the ''s''. E.g. oyFilterPlugs_s -> oyFilterPlug_s
;[opaquepointer]
: This is an alternative way of the API and should not be used now.

===== <class>.members.h =====
A list of all the class members, e.g. for '''CMMapi6.members.h'''

<code>
  /** oyCMMapi4_s::context_type typic data; e.g. "oyDL" */
  char           * data_type_in;
  /** oyCMMapi7_s::context_type specific data; e.g. "lcCC" */
  char           * data_type_out;
  oyCMMdata_Convert_f oyCMMdata_Convert;
</code>
===== <class>.public.h =====
===== <class>.public_methods_declarations.h =====
===== <class>.public_methods_definitions.c =====
===== <class>.private_custom_definitions.c =====
===== <class>.private.h =====
===== <class>.private_methods_declarations.h =====
===== <class>.private_methods_definitions.c =====

=== templates/ ===


== How to import a new class ==

The following steps are used.

====1. Initial commit ====
;Directory
: sources/
*(a) cp Class.dox <class>.dox  & edit
*(b) run generator
*(c) Edit <class>.members.h
*(d) cp .private_methods_definitions.c
*(e) run generator
*(f) cp API_generated/oy<class>_s_private_custom_definitions.c  sources/<class>.private_custom_definitions.c
*(g) rm templates/<group>/<class>_s_private_custom_definitions.template.c
*(h) run generator

 Skip steps (c) to (h) for list classes

;git short comment
: <nowiki>*</nowiki> Create skeleton files for oyClass_s

==== 2. Import class members like enums,typedefs,... ====
oyranos/: grep 'memberof *oy<calss>_s' * -B3
*(a) Private ones in sources/<class>.private.h
;git short comment
: [sources] Import oy<class>_s private [enums,typedefs,...]
*(b) Public ones in sources/<class>.public.h
;git short comment
: [sources] Import oy<class>_s public [enums,typedefs,...]

==== 3. Implement constructor [oyClass_New] ====
;files:
 sources/<class>.private_custom_definitions.c
;git short comment
: [review] [sources] Implement the constructor for oyClass_s

==== 4. Implement copy constructor [oyClass_Copy] ====
sources/
 .private_custom_definitions.c
[review] [sources] Implement the copy constructor for oyClass_s

==== 5. Implement destructor [oyClass_Release] ====
sources/
 .private_custom_definitions.c
[review] [sources] Implement the destructor for oyClass_s

==== 6. Import private methods for oyClass_s ====
sources/
 .private_methods_declarations.h
 .private_methods_definitions.c
[sources] Import private methods for oyClass_s

==== 7. Adopt oyClass_s private methods ====
sources/
 .private_methods_declarations.h
 .private_methods_definitions.c
[review] [sources] Adopt oyClass_XXX_() to "hidden struct" interface.

==== 8. Import public methods for oyClass_s ====
sources/
 .public_methods_declarations.h
 .public_methods_definitions.c
[sources] Import public methods for oyClass_s

==== 9. Adopt oyClass_s public methods ====
sources/
 .public_methods_declarations.h
 .public_methods_definitions.c
[review] [sources] Adopt oyClass_XXX() to "hidden struct" interface.