The '''''Color-Managed Printing eXtension (libCmpx)''''' is a library that will add color management support to print dialogs.  

== Dependencies ==

The library depends on Oyranos for profile selection, as well as Ghostscript to render the PDF.  In addition, CUPS is required to handle PPD files.

Version requirements for these dependencies are as follows:

* Oyranos (the up-to-date [http://www.oyranos.org/wiki/index.php?title=Oyranos/git git version])
* [http://pages.cs.wisc.edu/~ghost/ Ghostscript] (9.04)
* [http://www.cups.org/software.php CUPS] (1.5.0)

== Installation ==

libCmpx can be obtained through git.

 $ git clone git://gitorious.org/libcmpx/libcmpx.git

Once the project is downloaded, enter its root directory and type the following:

 $ mkdir build
 $ cd build
 $ cmake ..
 $ make
 $ make install

Updates can be obtained by typing:

 $ git pull

== API Usage ==

The libCmpx API is based on the prototype library invented for the [http://www.oyranos.org/wiki/index.php?title=XCPD#API_Usage XCPD].  As such, the API usage is very similar between the two.

===== Sample Code =====

The following code demonstrates printer profile selection and PDF rendering using the libCmpx API.

 <libcmpx.h>

 libcmpx_selectormode_t getProfileSelectionMode();
 void setManualProfile(libcmpx_cm_t*);

 int main()
 {
    /* Optional status enums */
    libcmpx_sstatus_t selector_status;
    libcmpx_rstatus_t renderer_status;
 
    /* Initialize API color management */
    libcmpx_cm_t* cm = libcmpxCM_initialize();     
 
    /* Open PPD file. */
    ppd_file_t* ppd = ppdOpenFile("ppdfile.ppd");
 
    /* Get profile selection mode from the GUI. (see box below) */
    libcmpx_selectormode_t mode = getProfileSelectionMode(cm); 
 
    /* Set the profile based on the dialog selection */
    if(mode == LIBCMPX_USERSELECT_MODE)
      setManualProfile(cm);
    else if (mode != LIBCMPX_SELECTORMODE_NOTSET)
      selector_status = libcmpxCM_setProfileFromPPD(cm, ppd, mode);
 
    /* Render the PDF */
    renderer_status = libcmpxCM_setSpoolPdf(cm);
 
    libcmpxCM_close(cm);
 
    return 0;
 }


The following helper functions are part of the ICC profile selection in the UI. (Using Qt.)

 QString iccModeString;
 QComboBox iccModeComboBox;

 libcmpx_selectormode_t getProfileSelectionMode()
 {
   iccModeString = iccModeComboBox.currentText(); 
 
   if(iccModeString == "Auto Set")
    return LIBCMPX_AUTOSELECT_MODE;
   else if (iccModeString == "Application Set")
    return LIBCMPX_SYSTEMSELECT_MODE;
   else if (iccModeString == "Manual") 
    return LIBCMPX_USERSELECT_MODE; 
   else
    return LIBCMPX_SELECTORMODE_NOTSET;
 }
 
 void setManualProfile(libcmpx_cm_t* cm_obj)
 {
    QString userSelection = QFileDialog::getOpenFileName(. . .);
    const char* user_profile = userSelection.toLocal8Bit();
 
    libcmpxCM_setProfile(user_profile, cm_obj);  
 }